import unittest
import datetime
from unittest.mock import Mock

from website.models import User, Income, Expenses, Planning, Savings, ChatAI


class TestModels(unittest.TestCase):

    def test_income_creation(self):
        user_id = 1
        amount = 1500.50
        name = "Salary May"
        date = datetime.date(2025, 5, 1)
        type_str = "Monthly"
        income = Income(
            user_id=user_id,
            amount=amount,
            name=name,
            date=date,
            type=type_str
        )
        # Note: id is typically auto-generated by DB
        self.assertEqual(income.user_id, user_id)
        self.assertEqual(income.amount, amount)
        self.assertEqual(income.name, name)
        self.assertEqual(income.date, date)
        self.assertEqual(income.type, type_str)

    def test_expenses_creation(self):
        user_id = 2
        amount = 75.99
        name = "Groceries"
        date = datetime.date(2025, 5, 3)
        type_str = "Food"
        expense = Expenses(
            user_id=user_id,
            amount=amount,
            name=name,
            date=date,
            type=type_str
        )
        self.assertEqual(expense.user_id, user_id)
        self.assertEqual(expense.amount, amount)
        self.assertEqual(expense.name, name)
        self.assertEqual(expense.date, date)
        self.assertEqual(expense.type, type_str)

    def test_planning_creation(self):
        user_id = 1
        amount = 2000.00
        name = "Vacation Fund"
        date = datetime.date(2025, 12, 1)
        type_str = "Travel"
        planning = Planning(
            user_id=user_id,
            amount=amount,
            name=name,
            date=date,
            type=type_str
        )
        self.assertEqual(planning.user_id, user_id)
        self.assertEqual(planning.amount, amount)
        self.assertEqual(planning.name, name)
        self.assertEqual(planning.date, date)
        self.assertEqual(planning.type, type_str)

    def test_savings_creation(self):
        user_id = 3
        amount = 150.00
        saving = Savings(
            user_id=user_id,
            amount=amount
        )
        self.assertEqual(saving.user_id, user_id)
        self.assertEqual(saving.amount, amount)

    def test_chat_ai_creation(self):
        user_id = 4
        message = "What is a good saving strategy?"
        response = "Save 20% of your income..."
        chat = ChatAI(
            user_id=user_id,
            message=message,
            response=response
        )
        self.assertEqual(chat.user_id, user_id)
        self.assertEqual(chat.message, message)
        self.assertEqual(chat.response, response)

    def test_user_creation(self):
        username = "testuser1"
        password_hash = "hashed_password_string"
        user = User(
            username=username,
            password=password_hash
        )
        self.assertEqual(user.username, username)
        self.assertEqual(user.password, password_hash)
        # Check relationship attributes exist, though they'd be empty/unloaded
        self.assertTrue(hasattr(user, 'income'))
        self.assertTrue(hasattr(user, 'expenses'))
        self.assertTrue(hasattr(user, 'planning'))
        self.assertTrue(hasattr(user, 'savings'))
        self.assertTrue(hasattr(user, 'chat_ai'))
        # Check UserMixin attributes exist (basic check)
        self.assertTrue(hasattr(user, 'is_authenticated'))
        self.assertTrue(hasattr(user, 'is_active'))
        self.assertTrue(hasattr(user, 'is_anonymous'))
        self.assertTrue(hasattr(user, 'get_id'))


if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)